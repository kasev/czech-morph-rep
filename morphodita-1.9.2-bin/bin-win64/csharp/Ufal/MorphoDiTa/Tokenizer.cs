//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.MorphoDiTa {

public class Tokenizer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Tokenizer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Tokenizer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Tokenizer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          morphodita_csharpPINVOKE.delete_Tokenizer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void setText(string text) {
    morphodita_csharpPINVOKE.Tokenizer_setText(swigCPtr, text);
  }

  public bool nextSentence(Forms forms, TokenRanges tokens) {
    bool ret = morphodita_csharpPINVOKE.Tokenizer_nextSentence(swigCPtr, Forms.getCPtr(forms), TokenRanges.getCPtr(tokens));
    return ret;
  }

  public static Tokenizer newVerticalTokenizer() {
    global::System.IntPtr cPtr = morphodita_csharpPINVOKE.Tokenizer_newVerticalTokenizer();
    Tokenizer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tokenizer(cPtr, true);
    return ret;
  }

  public static Tokenizer newCzechTokenizer() {
    global::System.IntPtr cPtr = morphodita_csharpPINVOKE.Tokenizer_newCzechTokenizer();
    Tokenizer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tokenizer(cPtr, true);
    return ret;
  }

  public static Tokenizer newEnglishTokenizer() {
    global::System.IntPtr cPtr = morphodita_csharpPINVOKE.Tokenizer_newEnglishTokenizer();
    Tokenizer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tokenizer(cPtr, true);
    return ret;
  }

  public static Tokenizer newGenericTokenizer() {
    global::System.IntPtr cPtr = morphodita_csharpPINVOKE.Tokenizer_newGenericTokenizer();
    Tokenizer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tokenizer(cPtr, true);
    return ret;
  }

}

}
